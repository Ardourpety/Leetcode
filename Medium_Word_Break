class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        
        queue<int> BFS;
        unordered_set<int> visited;
        
        unordered_set<string> m;
        
        for(int i=0;i<wordDict.size();i++) m.insert(wordDict[i]);
        
        BFS.push(0);
        
        while(BFS.size()>0){
            int start=BFS.front();
            BFS.pop();
            
            if(visited.find(start)==visited.end()){
                visited.insert(start);
                for(int i=start;i<s.size();i++){
                    
                    string word(s,start,i-start+1);
                    
                    if(m.find(word)!=m.end()){
                        BFS.push(i+1);
                        if(i+1==s.size()){
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
};
